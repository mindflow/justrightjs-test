import{ObjectFunction,List,Map,Logger}from"./coreutil_v1.js";import{ComponentFactory,CanvasStyles,EventRegistry}from"./justright_core_v1.js";import{InjectionPoint,MindiConfig,InstancePostConfigTrigger,MindiInjector}from"./mindi_v1.js";import{TestClassState,TestTrigger,ObjectProvider,TestBench}from"./testbench_v1.js";class LineEntry{static get COMPONENT_NAME(){return"LineEntry"}static get TEMPLATE_URL(){return"/assets/justrightjs-test/lineEntry.html"}static get STYLES_URL(){return"/assets/justrightjs-test/lineEntry.css"}constructor(t,n=null){this.componentFactory=InjectionPoint.instance(ComponentFactory),this.line=t,this.color=n}postConfig(){this.component=this.componentFactory.create(LineEntry.COMPONENT_NAME),CanvasStyles.enableStyle(LineEntry.COMPONENT_NAME),this.component.setChild("lineEntry",this.line),this.color&&this.component.get("lineEntry").setAttributeValue("style","color:"+this.color)}}class TestEntryFunction{static get COMPONENT_NAME(){return"TestEntryFunction"}static get TEMPLATE_URL(){return"/assets/justrightjs-test/testEntryFunction.html"}static get STYLES_URL(){return"/assets/justrightjs-test/testEntryFunction.css"}constructor(t,n,e){this.componentFactory=InjectionPoint.instance(ComponentFactory),this.eventRegistry=InjectionPoint.instance(EventRegistry),this.testClass=t,this.testFunction=n,this.testTrigger=e}postConfig(){this.component=this.componentFactory.create(TestEntryFunction.COMPONENT_NAME),CanvasStyles.enableStyle(TestEntryFunction.COMPONENT_NAME),this.component.setChild("testEntryFunctionName",this.testFunction.name),this.eventRegistry.attach(this.component.get("runButton"),"onclick","//event:runClicked",this.component.componentIndex),this.eventRegistry.listen("//event:runClicked",new ObjectFunction(this,this.runClicked),this.component.componentIndex)}runClicked(){this.testTrigger.runFunction(this.testClass.name,this.testFunction.name)}result(t){TestClassState.RUNNING===t.state&&this.running(),TestClassState.SUCCESS===t.state&&this.succeed(),TestClassState.FAIL===t.state&&this.fail()}fail(){this.component.get("testEntryFunctionName").setAttributeValue("style","font-weight:bold;color:red")}succeed(){this.component.get("testEntryFunctionName").setAttributeValue("style","font-weight:bold;color:green")}running(){this.component.get("testEntryFunctionName").setAttributeValue("style","font-weight:bold;color:black")}reset(){this.component.get("testEntryFunctionName").removeAttribute("style")}}class TestEntry{static get COMPONENT_NAME(){return"TestEntry"}static get TEMPLATE_URL(){return"/assets/justrightjs-test/testEntry.html"}static get STYLES_URL(){return"/assets/justrightjs-test/testEntry.css"}constructor(t,n){this.componentFactory=InjectionPoint.instance(ComponentFactory),this.eventRegistry=InjectionPoint.instance(EventRegistry),this.testEntryFunctionProvider=InjectionPoint.provider(TestEntryFunction),this.testClass=t,this.testTrigger=n,this.testEntryFunctionList=new List,this.failed=!1}postConfig(){this.component=this.componentFactory.create(TestEntry.COMPONENT_NAME),CanvasStyles.enableStyle(TestEntry.COMPONENT_NAME),this.component.setChild("testEntryName",this.testClass.name),this.eventRegistry.attach(this.component.get("runButton"),"onclick","//event:runClicked",this.component.componentIndex),this.eventRegistry.listen("//event:runClicked",new ObjectFunction(this,this.runClicked),this.component.componentIndex),this.testClass.testFunctions().forEach((t,n)=>{this.testEntryFunctionProvider.get([this.testClass,t,this.testTrigger]).then(t=>{this.testEntryFunctionList.add(t);this.component.get("testEntryFunctions").addChild(t.component)});return!0},this)}runClicked(){this.failed=!1,this.testTrigger.runClass(this.testClass.name)}result(t){this.testEntryFunctionList.forEach((n,e)=>{n.testFunction.name===t.functionName&&n.result(t);return!0},this),this.failed||TestClassState.RUNNING!==t.state||this.running(),this.failed||TestClassState.SUCCESS!==t.state||this.succeed(),TestClassState.FAIL===t.state&&this.fail()}fail(){this.failed=!0,this.component.get("testEntryName").setAttributeValue("style","font-weight:bold;color:red")}succeed(){this.component.get("testEntryName").setAttributeValue("style","font-weight:bold;color:green")}running(){this.component.get("testEntryName").setAttributeValue("style","font-weight:bold;color:black")}reset(){this.failed=!1,this.testEntryFunctionList.forEach((t,n)=>{t.reset();return!0},this),this.component.get("testEntryName").removeAttribute("style")}}class TestBenchView{static get COMPONENT_NAME(){return"TestBenchView"}static get TEMPLATE_URL(){return"/assets/justrightjs-test/testBenchView.html"}static get STYLES_URL(){return"/assets/justrightjs-test/testBenchView.css"}constructor(t){this.componentFactory=InjectionPoint.instance(ComponentFactory),this.eventRegistry=InjectionPoint.instance(EventRegistry),this.testTrigger=t,this.testEntryMap=new Map}postConfig(){this.component=this.componentFactory.create(TestBenchView.COMPONENT_NAME),CanvasStyles.enableStyle(TestBenchView.COMPONENT_NAME),this.eventRegistry.attach(this.component.get("clearButton"),"onclick","//event:clearClicked",this.component.componentIndex),this.eventRegistry.listen("//event:clearClicked",new ObjectFunction(this,this.clearClicked),this.component.componentIndex),this.eventRegistry.attach(this.component.get("runAllButton"),"onclick","//event:runAllClicked",this.component.componentIndex),this.eventRegistry.listen("//event:runAllClicked",new ObjectFunction(this,this.runAllClicked),this.component.componentIndex),this.eventRegistry.attach(this.component.get("resetButton"),"onclick","//event:resetClicked",this.component.componentIndex),this.eventRegistry.listen("//event:resetClicked",new ObjectFunction(this,this.resetClicked),this.component.componentIndex)}addTestEntry(t){this.testEntryMap.set(t.testClass.name,t),this.component.addChild("testList",t.component)}runAllClicked(){this.testTrigger.runAll()}clearClicked(){this.component.clearChildren("testResult")}addLine(t){this.component.addChild("testResult",t.component)}resetClicked(){this.testEntryMap.forEach((t,n,e)=>{const s=n;s.reset();return!0})}result(t){if(this.testEntryMap.contains(t.className)){const n=this.testEntryMap.get(t.className);n.result(t)}}}class TestBenchTestTrigger extends TestTrigger{constructor(){super()}set testBench(t){this.theTestBench=t}runFunction(t,n){this.theTestBench.runFunction(t,n)}runClass(t){this.theTestBench.runClass(t)}runAll(){this.theTestBench.runAll()}}class DiObjectProvider extends ObjectProvider{constructor(){super()}provide(t,n=[]){return new Promise((e,s)=>{const i=new t(...n);const o=new MindiConfig;o.addAllInstanceProcessor([InstancePostConfigTrigger]);i.typeConfigList&&o.addAllTypeConfig(i.typeConfigList);o.finalize().then(()=>{MindiInjector.getInstance().injectTarget(i,o).then(()=>{e(i)})})})}}class TestBenchUi{constructor(){this.testTrigger=new TestBenchTestTrigger,this.componentFactory=InjectionPoint.instance(ComponentFactory),this.testBenchView=InjectionPoint.instance(TestBenchView,[this.testTrigger]),this.testEntryProvider=InjectionPoint.provider(TestEntry),this.lineEntryProvider=InjectionPoint.provider(LineEntry),this.testBench=null,this.testEntryLoadedPromiseArray=[]}postConfig(){this.testBench=new TestBench(new ObjectFunction(this,this.log),new ObjectFunction(this,this.result),new DiObjectProvider),this.testTrigger.testBench=this.testBench}addTest(t){const n=this;if(!this.testBench.contains(t)){this.testBench.addTest(t);const e=this.testEntryProvider.get([t,this.testBench]).then(t=>{n.testBenchView.addTestEntry(t)});this.testEntryLoadedPromiseArray.push(e)}return this}run(){const t=this;Promise.all(this.testEntryLoadedPromiseArray).then(()=>{t.testBench.run()})}result(t){this.testBenchView.result(t)}log(t,n){const e=this.asColor(n),s=this;this.lineEntryProvider.get([t,e]).then(t=>{s.testBenchView.addLine(t)})}asColor(t){return Logger.ERROR===t?"red":Logger.FATAL===t?"red":null}get component(){return this.testBenchView.component}}export{DiObjectProvider,LineEntry,TestBenchTestTrigger,TestBenchUi,TestBenchView,TestEntry,TestEntryFunction};
